
HTML
--> Raw Structure

Css
--> look and feel(Design)


Block level
 --> starts from the new line
 --> Take whole width of the screen 
 --> ex - div, p, h1-h6, table

Inline level
--> Starts in the same line
--> Only take space which is required
--> ex - span, a, img

Formatting tags
----------------

<b> , <strong> , <i>, <em> , <mark>, <del> <ins> , <sup>, <sub>

Quotation
-----------

<blockquote> , <q>, <abbr>



CSS 
----

Cascading style sheets - styles, colors, text decoration, boxes
3 ways
--------
1. Inline CSS  - style attribute inside HTML elements
   syntax
   - style="text-align: center; border: 4px solid red
2. Internal CSS - <style> element in <head> section/tag
   syntax - 
   <style>
      body {
         background-color: bisque;
      }
      h1 {
         color: blue
      }
      h2 {
         color: red
      }
    </style>
    
3. External CSS - <link> element to link external css file
syntax
- <link rel="stylesheet" href="styles.css">


Table border
 - border: 2px solid purple;
 - border-radius: 30px;
 - border-style: solid

Table Padding  - space between edge(border) and content
4 property
padding-top
padding-bottom
padding-left
padding-right

Spacing - space between each cells

colspan - multiple columns

rowspan - multiple rows 


Selectors
----------

class and inside

class - . (dot ) - group of elements
id - # (hash) - unique element


Box Model
----------

content - text, image 
padding  space btwn content and border
border - 1px, 2px, box 
margin - outside the border


https://code.visualstudio.com/download - vs code install
https://github.com/ - github - create account
https://nodejs.org/en/ - install
https://git-scm.com/downloads - install
https://github.com/SangeethaShanmugm?tab=repositories  - follow
https://www.linkedin.com/ - linkedin - create account
https://www.netlify.com/ - create account(using github)


vs code extension
------------------

spell check
Tabnine
vscode-icons
eslint
Gitlens
githistory


CSS position
----------------

1.static -default
2.relative
3.fixed
4.absolute
5.sticky

z-index
--------
order an element

stack - FILO / LIFO


Bootstrap
----------

This is frontend framework - easy and faster
templates  - forms, buttons, cards, image carousals

Advantage
----------
Easy to use
Responsive
Mobile-first approach
Browser compatibility

CDN 
----

<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

Container - elements with contents - fixed width container
container-fluid - full width container

Boostrap cdn 
-------------
 
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
        <link rel="stylesheet" href="boot.css"/>
        <script src="https://kit.fontawesome.com/c4338603d0.js" crossorigin="anonymous"></script>


jQuery
-----------
       <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js" integrity="sha512-bPs7Ae6pVvhOSiIcyUClR7/q2OAsRiovw4vAkX+zJbw3ShAeeqezq50RIIcIURq7Oa20rW2n2q+fyXBNcU9lrw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css" integrity="sha512-tS3S5qG0BlhnQROyJXvNjeEM4UpMXHrQfTGmbQ1gKmelCxlSEBUaxhRBj/EFTzpbP4RVSrpEikbmdJobCvhE3g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.css" integrity="sha512-OTcub78R3msOCtY3Tc6FzeDJ8N9qvQn1Ph49ou13xgA9VsH9+LRxoFU6EqLhW4+PKRfU+/HReXmSZXHEkpYoOA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        <link rel="stylesheet" href="boot.css"/>



Form 
---------

npx json-server --watch data.json --port 7600


Grid  - 2 dimensional layout - both rows/columns
-----


flex - 1 dimensional layout - either rows/columns
-----



API call
----------

https://api.openweathermap.org/data/3.0/onecall?lat=12.9348766&lon=77.5887279&appid=a764710199b4aa019c290680e78b0bf3


https://api.openweathermap.org/data/2.5/weather?lat=12.9348766&lon=77.5887279&appid=a764710199b4aa019c290680e78b0bf3

https://api.openweathermap.org/data/2.5/forecast/daily?lat=12.9348766&lon=77.5887279&cnt=5&appid=a923915725db1ef670fcffd6eb38e029


Step for data
---------------

1. write down all the pages you are going to have in your website
2. start creating data 

> Home Page
> Listing Page
> Detail Page
> Place order Page
> Order Listing

=> List of city
=> List of Restaurants
=> QuickSearch List
=> List of Menu


Node js- Backend
MongoDb - Database
React - frontend
-> Single Page Application(SPA)
-> Reusability - creating once using it many times
home, about, contact


Node js
--------
Single threaded Asynchronous Non Block input/output(I/O)


Node Js do not require any server to compile

Node Inbuilt packages
----------------------
OS - Operating System
FS - File System
HTTP

Package.json
--------------
> Starting point to the app
> It contains all the packages we require
> It contains the scripts to run the app
> Meta Data(Description of the app)

Steps to generate package.json
----------------------------------

> Node js must be installed in your system/laptop
> go inside the project folder using cmd in start
> give code ., so it will open vs code - vs code terminal - npm init
> Answer all questions
> Type 'yes'


CRUD operation
---------------

C > Create(POST)
R > Read (GET)
U -> Update(PUT)
D -> Delete(DELETE)




next sesion
-----------
Open Source
install packages 
global packages
dev dependancy


Database
---------
1. Relational Db - SQL, mySQL, Oracle, Microsoft server - table format - rows &  columns
2. Non-Relational DB - MongoDb, couchdb, graphsql, 


MongoDb
---------
BSON - Binary Data format
store in BSON 
retrieve data in JSON


sql - table - columns & rows

mongodb  - document {}
table -collection

 {
    "id": 1,
    "name": "Avengers",
    "rating": 4.5,
    "type": "Action",
  },
  {
    id: 2,
    name: "Jab We Met",
    rating: 4.7,
    type: "Romantic",
  },
  
  eg
  updateOne(name: "Harry Potter")

  {
    "id": 1,
    "name": "Harry Potter",
    "rating": 4.5,
    "type": "Action",
  },


  updateMany(name: "Harry Potter")

  {
    "id": 1,
    "name": "Harry Potter",
    "rating": 4.5,
    "type": "Action",
  },
  {
    id: 2,
    name: "Harry Potter",
    rating: 4.7,
    type: "Romantic",
  },

  replaceOne(name: "Avengers")

  {
    name: "Avengers"
  },


  React
  ---------

  Steps to generate react app
  => open cmd
  => go inside the folder
  => npx create-react-app appname

  react => this is the main package
  react-dom => this will help us to render(display) the content in the Browser
 react-scripts - this will help you to run the app

 2 types of components
 -----------------------

 1. functional components
=> Dumb components
=>Mainly we use for the display purpose
=> we cannot maintain the state

 2. class components
=> Logical components
=> We use for logics, calling api, display as well
=> We can maintain the state


Hooks - function
---------------

state
------
=> state acts like a local variable
=> Each component can have its own state
=> We can update the value of the state

props
------
=> props helps to transfer data between nested components
=> We cannot update the value of the props


// Mongo Atlas
// ------------

// 1. Database Access - username, password - Build in Role - Atlas Admin - Creata User
// 2. Network Access - 0.0.0.0/0



Install
Mongodb – npm i mongodb
Dotenv  - npm i dotenv
Cors – - npm i cors
Bodyparser – npm i body-parser


git push
--------
git init
git add .
git commit -m "commitmsg"
git remote add origin https://github.com/SangeethaShanmugm/restApi.git =>  repo name
git push -u origin master